version: "3"
services:
  strapi:
    image: strapi/strapi
    volumes:
      - app:/srv/app
    networks:
      - traefik-public
    deploy:
      labels:
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=traefik-public
        # https-redirect middleware to redirect HTTP to HTTPS
        # It can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # traefik-http set up only to use the middleware to redirect to https
        # Uses the environment variable DOMAIN
        - traefik.http.routers.strapi-http.rule=Host(`strapi.bazzi.gg`)
        - traefik.http.routers.strapi-http.entrypoints=http
        - traefik.http.routers.strapi-http.middlewares=https-redirect
        # traefik-https the actual router using HTTPS
        # Uses the environment variable DOMAIN
        - traefik.http.routers.strapi-https.rule=Host(`strapi.bazzi.gg`)
        - traefik.http.routers.strapi-https.entrypoints=https
        - traefik.http.routers.strapi-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.strapi-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.strapi.loadbalancer.server.port=80

volumes:
  app:
networks:
  traefik-public:
    external: true
